---
import Layout from '@/layouts/Layout.astro'
import { getExperience, getEducation, getResearch } from '../lib/api';
import CvTimeline from '@/components/ui/CvTimeline.astro';

import type { Experience, Education, Publication } from '../types/cv';
import List from '@/components/ui/List.astro';
import PublicationsList from '@/components/ui/PublicationsList.astro';

const experienceData = await getExperience();
const educationData = await getEducation();
const researchData = await getResearch();

const experiences = experienceData.map(exp => ({
    company: exp.company_name,
    time: `${exp.start_date} - ${exp.end_date || 'Present'}`,
    title: exp.role,
    location: exp.location,
    description: exp.description,
}));

const education = educationData.map(edu => ({
    school: edu.institution,
    time: `${edu.start_date} - ${edu.end_date || 'Present'}`,
    degree: edu.degree,
    location: edu.location,
    description: edu.description,
}));

const publications = researchData.map(pub => ({
    title: pub.title,
    authors: pub.authors.join(', '),
    journal: pub.book,
    time: pub.publication_date,
    link: pub.url,
    abstract: pub.description,
}));

const skills = experienceData.flatMap(exp => exp.skills).filter((skill, index, self) => self.indexOf(skill) === index).map(skill => ({ title: skill, description: '' }));
import CvTimeline from '@/components/ui/CvTimeline.astro'

import type { Experience, Education, Publication } from '../types/cv'
import List from '@/components/ui/List.astro'
import PublicationsList from '@/components/ui/PublicationsList.astro'

let orderdExperiences: Experience[] = []
let orderdEducations: Education[] = []
let orderedPublications: Publication[] = []

const orderElement = <T extends { time: string }>(a: T, b: T) => {
  const presentValues = ['present', 'now', 'current', 'today']
  if (
			presentValues.includes(
				(a['time'] as string)?.split(' - ')[1]?.toLowerCase()
			)
		) {
			// If the date is 'present', it should be the first element
			return -1
		}
		const dateA = new Date((a['time'] as string)?.split(' - ')[1])
		const dateB = new Date((b['time'] as string)?.split(' - ')[1])
		return dateB.getTime() - dateA.getTime()
}

if (experiences.length > 0) {
	orderdExperiences = experiences.sort((a, b) => {
		return orderElement(a, b)
	})
}

if (education.length > 0) {
	orderdEducations = education.sort((a, b) => {
		return orderElement(a, b)
	})
}

if (publications.length > 0) {
	orderedPublications = publications.sort((a, b) => {
		return orderElement(a, b)
	})
}
---

<Layout>
	{
		orderdEducations.length > 0 && (
			<section class='mb-12'>
				<h2 class='text-2xl font-bold mb-6 border-b pb-2'>
					Education
				</h2>
				<CvTimeline elements={orderdEducations} colored={true} />
			</section>
		)
	}

	{
		orderdExperiences.length > 0 && (
			<section class='mb-12'>
				<h2 class='text-2xl font-bold mb-6 border-b pb-2'>
					Experiences
				</h2>
				<CvTimeline elements={orderdExperiences} colored={true} />
			</section>
		)
	}

	{
		orderdEducations.length > 0 && (
			<section class='mb-12'>
				<h2 class='text-2xl font-bold mb-6 border-b pb-2'>
					Last publications
				</h2>
				<PublicationsList elements={orderedPublications}/>
			</section>
		)
	}

	{
		skills.length > 0 && (
			<section class='mb-12'>
				<List listTitle='Skills' listItems={skills}/>
			</section>
		)
	}
</Layout>
