---
import type { ExperienceItem } from '@/data/experience';

interface Props {
  item: ExperienceItem;
  isLast?: boolean;
}

const { item, isLast = false } = Astro.props;

// Builder pattern: only include elements if data exists
const hasLogo = item.company_logo_url && item.company_logo_url.trim() !== '';
const hasCompanyName = item.company_name && item.company_name.trim() !== '';
const hasRole = item.role && item.role.trim() !== '';
const hasEmploymentType = item.employment_type && item.employment_type.trim() !== '';
const hasLocation = item.location && item.location.trim() !== '';
const hasWorkMode = item.work_mode && item.work_mode.trim() !== '';
const hasDescription = item.description && item.description.trim() !== '';
const hasAchievements = item.achievements && item.achievements.length > 0;
const hasSkills = item.skills && item.skills.length > 0;
const hasTechStack = item.tech_stack && item.tech_stack.length > 0;
const hasStartDate = item.start_date && item.start_date.trim() !== '';
const hasEndDate = item.end_date && item.end_date.trim() !== '';

// Build date range string
const dateRange = hasStartDate || hasEndDate
  ? `${hasStartDate ? item.start_date : 'N/A'} - ${
      item.is_current ? 'Present' : hasEndDate ? item.end_date : 'N/A'
    }`
  : null;

// Calculate duration (simple estimation)
const calculateDuration = () => {
  if (!hasStartDate) return null;
  const start = new Date(item.start_date!);
  const end = item.is_current ? new Date() : hasEndDate ? new Date(item.end_date!) : new Date();
  const months = (end.getFullYear() - start.getFullYear()) * 12 + (end.getMonth() - start.getMonth());
  if (months < 1) return "Less than a month";
  if (months < 12) return `${months} month${months > 1 ? 's' : ''}`;
  const years = Math.floor(months / 12);
  const remainingMonths = months % 12;
  return `${years} year${years > 1 ? 's' : ''}${remainingMonths > 0 ? ` ${remainingMonths} month${remainingMonths > 1 ? 's' : ''}` : ''}`;
};

const duration = calculateDuration();
---

<div class='experience-item relative'>
  <!-- Timeline Line -->
  {!isLast && (
    <div class='absolute left-6 top-12 bottom-0 w-0.5 bg-gradient-to-b from-primary to-base-300 hidden md:block'></div>
  )}

  <!-- Card -->
  <div class='experience-card bg-base-100 rounded-xl shadow-lg hover:shadow-2xl transition-all duration-300 border border-base-300 overflow-hidden'>
    <div class='flex flex-col md:flex-row'>
      <!-- Left Side: Timeline Indicator & Logo -->
      <div class='flex md:flex-col items-center md:items-start gap-4 p-6 md:w-32 bg-gradient-to-br from-base-200 to-base-100'>
        <!-- Timeline Dot -->
        <div class='relative z-10 flex-shrink-0'>
          <div class={`w-12 h-12 rounded-full flex items-center justify-center shadow-lg ${
            item.is_current
              ? 'bg-gradient-to-br from-primary to-secondary animate-pulse'
              : 'bg-base-300'
          }`}>
            {item.is_current ? (
              <svg class='w-6 h-6 text-primary-content' fill='currentColor' viewBox='0 0 20 20'>
                <path fill-rule='evenodd' d='M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z' clip-rule='evenodd'></path>
              </svg>
            ) : (
              <svg class='w-6 h-6 text-base-content/40' fill='currentColor' viewBox='0 0 20 20'>
                <path fill-rule='evenodd' d='M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z' clip-rule='evenodd'></path>
              </svg>
            )}
          </div>
        </div>

        <!-- Company Logo (if provided) -->
        {hasLogo && (
          <div class='flex-shrink-0 hidden md:block mt-4'>
            <div class='w-20 h-20 bg-base-100 rounded-lg shadow-md overflow-hidden p-2 border border-base-300'>
              <img
                src={item.company_logo_url}
                alt={`${hasCompanyName ? item.company_name : 'Company'} logo`}
                class='w-full h-full object-contain'
              />
            </div>
          </div>
        )}
      </div>

      <!-- Right Side: Content -->
      <div class='flex-1 p-6'>
        <!-- Header -->
        <div class='mb-4'>
          {hasRole && (
            <h3 class='text-2xl font-bold text-base-content mb-2'>
              {item.role}
            </h3>
          )}

          {hasCompanyName && (
            <p class='text-lg font-semibold text-primary mb-3'>
              {item.company_name}
            </p>
          )}

          <!-- Meta Information -->
          <div class='flex flex-wrap gap-3 items-center text-sm'>
            {/* Employment Type Badge */}
            {hasEmploymentType && (
              <span class='badge badge-primary badge-outline gap-1'>
                <svg class='w-3 h-3' fill='currentColor' viewBox='0 0 20 20'>
                  <path fill-rule='evenodd' d='M6 6V5a3 3 0 013-3h2a3 3 0 013 3v1h2a2 2 0 012 2v3.57A22.952 22.952 0 0110 13a22.95 22.95 0 01-8-1.43V8a2 2 0 012-2h2zm2-1a1 1 0 011-1h2a1 1 0 011 1v1H8V5zm1 5a1 1 0 011-1h.01a1 1 0 110 2H10a1 1 0 01-1-1z' clip-rule='evenodd'></path>
                  <path d='M2 13.692V16a2 2 0 002 2h12a2 2 0 002-2v-2.308A24.974 24.974 0 0110 15c-2.796 0-5.487-.46-8-1.308z'></path>
                </svg>
                {item.employment_type}
              </span>
            )}

            {/* Work Mode Badge */}
            {hasWorkMode && (
              <span class={`badge gap-1 ${
                item.work_mode === 'Remote'
                  ? 'badge-secondary badge-outline'
                  : 'badge-accent badge-outline'
              }`}>
                <svg class='w-3 h-3' fill='currentColor' viewBox='0 0 20 20'>
                  {item.work_mode === 'Remote' ? (
                    <path d='M10.894 2.553a1 1 0 00-1.788 0l-7 14a1 1 0 001.169 1.409l5-1.429A1 1 0 009 15.571V11a1 1 0 112 0v4.571a1 1 0 00.725.962l5 1.428a1 1 0 001.17-1.408l-7-14z'></path>
                  ) : (
                    <path fill-rule='evenodd' d='M4 4a2 2 0 012-2h8a2 2 0 012 2v12a1 1 0 110 2h-3a1 1 0 01-1-1v-2a1 1 0 00-1-1H9a1 1 0 00-1 1v2a1 1 0 01-1 1H4a1 1 0 110-2V4zm3 1h2v2H7V5zm2 4H7v2h2V9zm2-4h2v2h-2V5zm2 4h-2v2h2V9z' clip-rule='evenodd'></path>
                  )}
                </svg>
                {item.work_mode}
              </span>
            )}

            {/* Date Range */}
            {dateRange && (
              <span class='flex items-center gap-1 text-base-content/70'>
                <svg class='w-4 h-4' fill='none' stroke='currentColor' viewBox='0 0 24 24'>
                  <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z'></path>
                </svg>
                {dateRange}
                {duration && <span class='text-base-content/50'>({duration})</span>}
              </span>
            )}

            {/* Location */}
            {hasLocation && (
              <span class='flex items-center gap-1 text-base-content/70'>
                <svg class='w-4 h-4' fill='none' stroke='currentColor' viewBox='0 0 24 24'>
                  <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z'></path>
                  <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M15 11a3 3 0 11-6 0 3 3 0 016 0z'></path>
                </svg>
                {item.location}
              </span>
            )}
          </div>
        </div>

        <!-- Description -->
        {hasDescription && (
          <div class='mb-4'>
            <p class='text-base-content/80 leading-relaxed'>
              {item.description}
            </p>
          </div>
        )}

        <!-- Achievements -->
        {hasAchievements && (
          <div class='mb-4'>
            <h4 class='text-sm font-semibold text-base-content mb-3 flex items-center gap-2'>
              <svg class='w-4 h-4 text-primary' fill='currentColor' viewBox='0 0 20 20'>
                <path d='M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z'></path>
              </svg>
              Key Achievements
            </h4>
            <ul class='space-y-2'>
              {item.achievements!.map((achievement) => (
                <li class='flex items-start gap-2 text-sm text-base-content/80'>
                  <svg class='w-5 h-5 text-success mt-0.5 flex-shrink-0' fill='currentColor' viewBox='0 0 20 20'>
                    <path fill-rule='evenodd' d='M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z' clip-rule='evenodd'></path>
                  </svg>
                  <span>{achievement}</span>
                </li>
              ))}
            </ul>
          </div>
        )}

        <!-- Tech Stack -->
        {hasTechStack && (
          <div class='mb-4'>
            <h4 class='text-sm font-semibold text-base-content mb-2 flex items-center gap-2'>
              <svg class='w-4 h-4 text-secondary' fill='currentColor' viewBox='0 0 20 20'>
                <path fill-rule='evenodd' d='M12.316 3.051a1 1 0 01.633 1.265l-4 12a1 1 0 11-1.898-.632l4-12a1 1 0 011.265-.633zM5.707 6.293a1 1 0 010 1.414L3.414 10l2.293 2.293a1 1 0 11-1.414 1.414l-3-3a1 1 0 010-1.414l3-3a1 1 0 011.414 0zm8.586 0a1 1 0 011.414 0l3 3a1 1 0 010 1.414l-3 3a1 1 0 11-1.414-1.414L16.586 10l-2.293-2.293a1 1 0 010-1.414z' clip-rule='evenodd'></path>
              </svg>
              Tech Stack
            </h4>
            <div class='flex flex-wrap gap-2'>
              {item.tech_stack!.map((tech) => (
                <span class='px-3 py-1 bg-secondary/10 text-secondary text-xs font-medium rounded-full border border-secondary/20 hover:bg-secondary/20 transition-colors'>
                  {tech}
                </span>
              ))}
            </div>
          </div>
        )}

        <!-- Skills -->
        {hasSkills && (
          <div>
            <h4 class='text-sm font-semibold text-base-content mb-2 flex items-center gap-2'>
              <svg class='w-4 h-4 text-accent' fill='currentColor' viewBox='0 0 20 20'>
                <path d='M10.394 2.08a1 1 0 00-.788 0l-7 3a1 1 0 000 1.84L5.25 8.051a.999.999 0 01.356-.257l4-1.714a1 1 0 11.788 1.838L7.667 9.088l1.94.831a1 1 0 00.787 0l7-3a1 1 0 000-1.838l-7-3zM3.31 9.397L5 10.12v4.102a8.969 8.969 0 00-1.05-.174 1 1 0 01-.89-.89 11.115 11.115 0 01.25-3.762zM9.3 16.573A9.026 9.026 0 007 14.935v-3.957l1.818.78a3 3 0 002.364 0l5.508-2.361a11.026 11.026 0 01.25 3.762 1 1 0 01-.89.89 8.968 8.968 0 00-5.35 2.524 1 1 0 01-1.4 0zM6 18a1 1 0 001-1v-2.065a8.935 8.935 0 00-2-.712V17a1 1 0 001 1z'></path>
              </svg>
              Skills
            </h4>
            <div class='flex flex-wrap gap-2'>
              {item.skills!.map((skill) => (
                <span class='px-3 py-1 bg-accent/10 text-accent text-xs font-medium rounded-full border border-accent/20 hover:bg-accent/20 transition-colors'>
                  {skill}
                </span>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  </div>
</div>

<style>
  .experience-card {
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }

  .experience-card:hover {
    transform: translateX(8px);
  }

  @keyframes pulse {
    0%, 100% {
      opacity: 1;
    }
    50% {
      opacity: .8;
    }
  }

  .animate-pulse {
    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }
</style>
