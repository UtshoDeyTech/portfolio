---
import { ClientRouter } from 'astro:transitions';

import BetterIcon from '../components/ui/BetterIcon.astro'
import DarkLightController from '../components/ui/DarkLightController.astro'
import Navbar from '../components/ui/Navbar.astro'
import Head from '../components/Head.astro'

import { seo, profile, template } from '../settings'
import Footer from '../components/ui/Footer.astro'

type Props = {
	title?: string
	description?: string
	image?: string
}

const {
	title = seo.default_title,
	description = seo.default_description,
	image = seo.default_image,
} = Astro.props
---

<!doctype html>
<html lang='en'>
	<head>
		{template.transitions && <ClientRouter /> }

		<Head title={title} description={description} image={image} />
	</head>
	<body>
		<div class={`bg-base-100 drawer lg:drawer-open ${template.menu_left ? 'drawer-end' : ''}`} id="main-container">
			<input id='my-drawer' type='checkbox' class='drawer-toggle' />
			<!-- Drawer content -->
            <div class='drawer-content bg-base-100 transition-all duration-300 ease-in-out' id="drawer-content">
				<div class='bg-base-100 z-50 text-base-content shadow-sm'>
					<nav class='navbar'>
						<div class='navbar-start'>
							{template.menu_left &&
								<DarkLightController/>
							}
							<label for='my-drawer' class='btn btn-square btn-ghost lg:hidden'>
								<BetterIcon>
									<svg
										xmlns='http://www.w3.org/2000/svg'
										fill='none'
										viewBox='0 0 24 24'
										stroke-width='1.5'
										class='size-6 stroke-current'
									>
										<path
											stroke-linecap='round'
											stroke-linejoin='round'
											d='M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5'></path>
									</svg>
								</BetterIcon>
							</label>
						</div>
						<div class='navbar-center lg:hidden text-lg font-black'>
							{profile.title}
							{profile.fullName}
						</div>
						<div class='navbar-end'>
							{!template.menu_left &&
								<DarkLightController/>
							}
						</div>
					</nav>
				</div>
                <main class='main-content p-8 pt-10 lg:pt-16 lg:max-w-5xl max-w-full mx-auto min-h-screen flex flex-col justify-between transition-all duration-300 ease-in-out'>
					<!-- Page content -->
					<slot />
				<Footer />
				</main>
			</div>
			<!-- Drawer side -->
			<div class='drawer-side z-40'>
				<label for='my-drawer' aria-label='close sidebar' class='drawer-overlay'
				></label>
				<Navbar />
			</div>
		</div>
	</body>
</html>

<style>
	@media (prefers-color-scheme: dark) {
		:root {
			--my-color: #252b30;
		}
	}
	html,
	body {
		margin: 0;
		width: 100%;
		height: 100%;
	}
	
	/* Desktop layout adjustments */
	@media (min-width: 1024px) {
		.drawer-open .drawer-content {
			margin-left: 20rem; /* Default expanded width */
			transition: margin-left 0.3s ease-in-out;
		}
		
		/* When navbar is collapsed */
		.drawer-open .navbar-collapsed .drawer-content {
			margin-left: 5rem !important;
		}
	}
</style>

<script is:inline>
	// Handle navbar toggle for layout adjustments
	document.addEventListener('DOMContentLoaded', function() {
		// Set up mutation observer to watch for navbar changes
		const navbar = document.querySelector('.navbar-container');
		const mainContainer = document.querySelector('#main-container');
		
		if (navbar && mainContainer) {
			const observer = new MutationObserver(function(mutations) {
				mutations.forEach(function(mutation) {
					if (mutation.type === 'attributes' && mutation.attributeName === 'data-collapsed') {
						const isCollapsed = navbar.getAttribute('data-collapsed') === 'true';
						
						if (isCollapsed) {
							mainContainer.classList.add('navbar-collapsed');
						} else {
							mainContainer.classList.remove('navbar-collapsed');
						}
					}
				});
			});
			
			observer.observe(navbar, { 
				attributes: true, 
				attributeFilter: ['data-collapsed'] 
			});
		}
	});
</script>